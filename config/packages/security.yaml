security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: users_in_memory

            # activate different ways to authenticate
            # You can add authentication methods like form_login, etc. here
            
            logout:
                path: /logout      # The logout path
                target: /           # Redirect to homepage or wherever you want after logout

            # Uncomment if you need switch_user functionality
            # switch_user: true

    # Easy way to control access for large sections of your site
    access_control:
        # Example: restrict access to /admin only to ROLE_ADMIN users
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # Example: restrict access to /profile only to ROLE_USER users
        # - { path: ^/profile, roles: ROLE_USER }

# Test environment configuration
when@test:
    security:
        password_hashers:
            # In tests, lower the cost for password hashing
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4  # Lower possible value for bcrypt
                time_cost: 3  # Lower possible value for argon
                memory_cost: 10  # Lower possible value for argon
